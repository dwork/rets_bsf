<?php

require ('rets_bsf.interface.inc');
require ('rets_bsf.includes.inc');
require ('rets_bsf.cleanup.inc');
require ('rets_bsf.rotate.inc');

/**
 * @file
 * Implements interface from OIP's RETS BSF feed using Cron
 */

/**
 * Copied from "Example using Cron API, including hook_cron() and hook_cron_queue_info().
 *
 */

/**
 * Implementation of hook_help().
 */
function rets_bsf_help($path, $arg) {
  switch ($path) {
    case 'admin/help#rets_bsf':
      return t('Interfaces RETS BSF data on demand, if a new agent is added, or controls how frequently CRON is run.');
  }
}  //  End of rets_bsf_help().


/**
 * Implements hook_menu().
 */
function rets_bsf_menu() {

  $items['admin/config/system/rets_bsf'] = array(
    'title' => 'RETS BSF Interface',
    'description' => 'Run RETS BSF if a new agent is added, or set frequency of interface',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rets_bsf_form'),
    'access arguments' => array('administer users'),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * The form to provide a link to cron.php.
 */
function rets_bsf_form($form, &$form_state) {
  $form['status'] = array(
    '#type' => 'fieldset',
    '#title' => t('RETS BSF "Cron" status information'),
  );
  $form['status']['intro'] = array(
    '#markup' => '<div>' . t('This job controls how often the RETS BSF job is run. You can run this job each time a new agent is added, or adjust the frequency. The frequency of runs is dependent upon OIPs run frequency, which is currently set to once a day. If you have administrative privileges you can run cron from this page and see the results.') . '</div>',
  );
  $form['status']['last'] = array(
    '#markup' => '<div>' . t('rets_bsf_cron() will next execute the first time cron runs after %time (%seconds seconds from now)' . '</div>',
      array(
        '%time' => date_iso8601(variable_get('rets_bsf_next_execution', time())),
        '%seconds' => variable_get('rets_bsf_next_execution', time()) - time(),
      )
    ),
  );

  if (user_access('administer site configuration')) {
    $form['cron_run'] = array(
      '#type' => 'fieldset',
      '#title' => t('Run cron manually'),
    );
    $form['cron_run']['cron_reset'] = array(
      '#type' => 'checkbox',
      '#title' => t("Run rets_bsf's cron regardless of whether interval has expired."),
      '#default_value' => TRUE,
    );
    $form['cron_run']['cron_trigger'] = array(
      '#type' => 'submit',
      '#value' => t('Run cron now'),
      '#submit' => array('rets_bsf_form_cron_run_submit'),
    );
  }

  $form['configuration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Configuration of rets_bsf_cron()'),
  );
  $form['configuration']['rets_bsf_interval'] = array(
    '#type' => 'select',
    '#title' => t('Cron interval'),
    '#description' => t('Time after which rets_bsf_cron will respond to a processing request.'),
    '#default_value' => variable_get('rets_bsf_interval', 60*60),
    '#options' => array(
      60 => t('1 minute'),
      300 => t('5 minutes'),
      3600 => t('1 hour'),
      60*60*24 => t('1 day'),
    ),
  );

  // Only the superuser can change this mode
  global $user;
  $usernode = user_load($user->uid);
  if ($user->uid == 1) {
    $form['configuration']['rets_bsf_interface'] = array(
    '#type' => 'select',
    '#title' => t('Retrieve'),
    '#description' => t('Retrieve ALL or specific Realtor listings. Only the superuser (admin) can change this value.'),
    '#default_value' => variable_get('rets_bsf_interface'),
    '#options' => array(
      'All' => t('All'),
      'Specific' => t('Specific'),
      ),
    );
  }

  $form['hotsheet'] = array(
    '#type' => 'fieldset',
    '#title' => t('Configuration of hotsheet()'),
  );
  $form['hotsheet']['rets_bsf_sendhotsheet'] = array(
    '#type' => 'select',
    '#title' => t('Email Hotsheet'),
    '#description' => t('Determine whether or not to send hotsheet to the hotsheet email address.'),
    '#default_value' => variable_get('rets_bsf_sendhotsheet','Yes'),
    '#options' => array(
      'Yes' => t('Yes'),
      'No' => t('No'),
    ),
  );
  $form['hotsheet']['rets_bsf_emailto'] = array(
    '#type' => 'textfield',
    '#size' => 60,
    '#maxlength' => 64,
    '#description' => t('Valid email address for hotsheet TO.'),
    '#default_value' => variable_get('rets_bsf_emailto'),
  );
  $form['hotsheet']['rets_bsf_emailfrom'] = array(
    '#type' => 'textfield',
    '#size' => 60,
    '#maxlength' => 64,
    '#description' => t('Valid email address for hotsheet'."'".'s FROM.'),
    '#default_value' => variable_get('rets_bsf_emailfrom'),
  );
  $form['hotsheet']['rets_bsf_emailsubject'] = array(
    '#type' => 'textfield',
    '#size' => 60,
    '#maxlength' => 64,
    '#description' => t('Subject of hotsheet email.'),
    '#default_value' => variable_get('rets_bsf_emailsubject','Hotsheet'),
  );

  return system_settings_form($form);
}

/**
 * Allow user to directly execute cron, optionally forcing it.
 */
function rets_bsf_form_cron_run_submit($form, &$form_state) {
  if (!empty($form_state['values']['cron_reset'])) {
    variable_set('rets_bsf_next_execution', 0);
  }

  // We don't usually use globals in this way. This is used here only to
  // make it easy to tell if cron was run by this form.
  $GLOBALS['rets_bsf_show_status_message'] = TRUE;
  if (drupal_cron_run()) {
    drupal_set_message(t('Cron ran successfully.'));
  }
  else {
    drupal_set_message(t('Cron run failed.'), 'error');
  }
}

/**
 * #submit function used to add the items to the queue when signaled by
 * the form.
 */
function rets_bsf_add_jobs_to_queue($form, &$form_state) {
  $queue = $form_state['values']['queue'];
  $num_items = $form_state['values']['num_items'];

  $queue = DrupalQueue::get($queue);
  for ($i=1; $i <= $num_items; $i++) {
    $item = new stdClass();
    $item->created = time();
    $item->sequence = $i;
    $queue->createItem($item);
  }
}
/**
 * Implements hook_cron().
 *
 * hook_cron() is the traditional (pre-Drupal 7) hook for doing "background"
 * processing. It gets called every time the Drupal cron runs and must decide
 * what it will do.
 *
 * In this example, it does a watchdog() call after the time named in
 * the variable 'rets_bsf_next_execution' has arrived, and then it
 * resets that variable to a time in the future.
 */
function rets_bsf_cron() {
  // Default to an hourly interval. Of course, cron has to be running at least
  // hourly for this to work.
  $interval = variable_get('rets_bsf_interval', 60*60);
  // We usually don't want to act every time cron runs (which could be every
  // minute) so keep a time for the next run in a variable.

  if (time() >= variable_get('rets_bsf_next_execution', 0)) {
    // Interface rets_bsf file
    rets_bsf_interface();

    // now, cleanup any straggling issues -- e.g. delete non-member listings
    if ($interface == 'All') {
       rets_bsf_cleanup();
    }

    // Next, set the rotation on member listings for the Feature
    rets_bsf_rotate();

    watchdog('rets_bsf', 'rets_bsf interface ran');
    if (!empty($GLOBALS['rets_bsf_show_status_message'])) {
      drupal_set_message(t('rets_bsf executed at %time', array('%time' => date_iso8601(time(0)))));
    }
    variable_set('rets_bsf_next_execution', time() + $interval);
  }
}


/**
 * Implements hook_cron_queue_info().
 *
 * hook_cron_queue_info() and family are new since Drupal 7, and allow any
 * process to add work to the queue to be acted on when cron runs. Queues are
 * described and worker callbacks are provided, and then only the worker
 * callback needs to be implemented.
 *
 * All the details of queue use are done by the cron_queue implementation, so
 * one doesn't need to know much about DrupalQueue().
 *
 * @see queue_example.module
 */
function rets_bsf_cron_queue_info() {
  $queues['rets_bsf_queue_1'] = array(
    'worker callback' => 'rets_bsf_queue_1_worker',
    'time' => 1, // One second max runtime per cron run.
  );
  $queues['rets_bsf_queue_2'] = array(
    'worker callback' => 'rets_bsf_queue_2_worker',
    'time' => 10,
  );
  return $queues;
}

/**
 * Simple workers for the two queues.
 *
 * @param $item
 *   Any object to be worked on.
 */
function rets_bsf_queue_1_worker($item) {
  rets_bsf_queue_report_work(1, $item);
}
function rets_bsf_queue_2_worker($item) {
  rets_bsf_queue_report_work(2, $item);
}

/**
 * Simple reporter for the workers.
 *
 * @param $worker
 *   (integer) worker number
 * @param $item
 *   (object) the $item which was stored in the cron queue.
 */
function rets_bsf_queue_report_work($worker, $item) {
  if (!empty($GLOBALS['rets_bsf_show_status_message'])) {
    drupal_set_message(t('Queue @worker worker processed item with sequence @sequence created at @time', array('@worker' => $worker, '@sequence' => $item->sequence, '@time' => date_iso8601($item->created))));
  }
  watchdog('rets_bsf', 'Queue @worker worker processed item with sequence @sequence created at @time', array('@worker' => $worker, '@sequence' => $item->sequence, '@time' => date_iso8601($item->created)));
}

/**
 * @} End of "defgroup rets_bsf".
 */
